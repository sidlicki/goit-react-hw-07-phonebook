{"version":3,"file":"static/js/370.5618c755.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","pages/HomePage.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/pages/styles.module.css?be7c"],"sourcesContent":["import React from 'react';\nimport css from './ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addToFavorite,\n  deleteContact,\n  removeFromFavorite,\n} from 'redux/contacts/contacts.reducer';\nimport { Notify } from 'notiflix';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(state => state.contactsStore.contacts);\n\n  const filter = useSelector(state => state.contactsStore.filter);\n\n  const favorites = useSelector(state => state.contactsStore.favoriteContacts);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  const filteredAndSortedContacts = [...filteredContacts].sort((a, b) =>\n    a.name.localeCompare(b.name)\n  );\n\n  const handleDeleteContact = (name, id) => {\n    dispatch(deleteContact(id));\n    Notify.info(`Contact \"${name}\" deleted`);\n    dispatch(removeFromFavorite(id));\n  };\n\n  const handleAddFavorite = contact => {\n    dispatch(addToFavorite(contact));\n    Notify.success(`Contact \"${contact.name}\" added to favorites`);\n  };\n\n  const handleRemoveFavorite = contact => {\n    dispatch(removeFromFavorite(contact.id));\n    Notify.info(`Contact \"${contact.name}\" removed from favorites`);\n  };\n\n  const favOrNo = id => {\n    return favorites.some(contact => contact.id === id);\n  };\n\n  return (\n    <ul className={css.list}>\n      {filteredAndSortedContacts.length > 0 ? (\n        filteredAndSortedContacts.map(contact => (\n          <li key={contact.id} className={css.item}>\n            {favOrNo(contact.id) ? (\n              <button\n                className={css.button}\n                onClick={() => handleRemoveFavorite(contact)}\n                title={`Remove favorite \"${contact.name}\"`}\n              >\n                üíô\n              </button>\n            ) : (\n              <button\n                className={css.button}\n                onClick={() => handleAddFavorite(contact)}\n                title={`Add to favorite \"${contact.name}\"`}\n              >\n                ü§ç\n              </button>\n            )}\n\n            <a className={css.link} href={`tel:${contact.number}`}>\n              <span>\n                <b>{contact.name}</b>:\n              </span>\n              <span>{contact.number}:</span>\n            </a>\n            <button\n              className={`${css.button} ${css.buttonDelete}`}\n              onClick={() => handleDeleteContact(contact.name, contact.id)}\n              title={`Delete contact \"${contact.name}\"`}\n            >\n              Delete\n            </button>\n          </li>\n        ))\n      ) : (\n        <h3 className={css.subtitle}>No contacts found.</h3>\n      )}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\"};","import { useDispatch } from 'react-redux';\nimport css from './Filter.module.css';\nimport { filterContacts } from 'redux/contacts/contacts.reducer';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <input\n      className={css.input}\n      type=\"text\"\n      placeholder=\"Search by name\"\n      onChange={evt => dispatch(filterContacts(evt.target.value))}\n    />\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { addContact } from 'redux/contacts/contacts.reducer';\nimport { Notify } from 'notiflix';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contactsStore.contacts);\n\n  const submitAddContact = evt => {\n    evt.preventDefault();\n\n    const [name, number] = evt.target.elements;\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.value.toLowerCase()\n      )\n    ) {\n      alert(\n        `A contact with that name (${name.value.toLowerCase()}) already exists, try changing the name`\n      );\n      return;\n    }\n    if (contacts.some(contact => contact.number === number.value)) {\n      alert(\n        `A contact with this phone number (${number.value}) already exists`\n      );\n      return;\n    }\n\n    const newContact = {\n      name: name.value,\n      number: number.value,\n      id: nanoid(),\n    };\n    try {\n      dispatch(addContact(newContact));\n      name.value = '';\n      number.value = '';\n      Notify.success(`Contact \"${newContact.name}\"  added successfully`);\n    } catch (e) {\n      Notify.error(\n        `Contact \"${newContact.name}\" not added.  Error: ${e.message}`\n      );\n    }\n  };\n  return (\n    <form onSubmit={submitAddContact} className={css.form}>\n      <input\n        className={css.input}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter name\"\n        required\n        pattern=\"^[A-Za-z–ê-–Ø–∞-—è–á—ó–Ü—ñ\\s]+$\"\n        title=\"You can enter only letters of the Latin and Cyrillic alphabets, as well as spaces.\"\n      />\n      <input\n        className={css.input}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter number\"\n        required\n        pattern=\"^(\\+?\\d+){5,12}$\"\n        title=\"Phone number must start with '+' (optional) and contain only digits. Length: 5-12 characters.\"\n      />\n      <button type=\"submit\" className={css.button} title={`Add new contact`}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport React from 'react';\nimport css from './styles.module.css';\n\nconst HomePage = () => {\n  return (\n    <>\n      <h1 className={css.title}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={css.subtitle}>Contacts</h2>\n      <Filter />\n\n      <ContactList />\n    </>\n  );\n};\nexport default HomePage;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"link\":\"ContactList_link__SuaLH\",\"button\":\"ContactList_button__7kL4l\",\"subtitle\":\"ContactList_subtitle__sjzfd\",\"buttonDelete\":\"ContactList_buttonDelete__3LEoC\"};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"styles_title__Eys6g\",\"subtitle\":\"styles_subtitle__DqUiJ\"};"],"names":["ContactList","dispatch","useDispatch","contacts","useSelector","state","contactsStore","filter","favorites","favoriteContacts","filteredContacts","contact","name","toLowerCase","includes","filteredAndSortedContacts","sort","a","b","localeCompare","className","css","length","map","id","some","onClick","removeFromFavorite","Notify","handleRemoveFavorite","title","addToFavorite","handleAddFavorite","href","number","deleteContact","handleDeleteContact","Filter","type","placeholder","onChange","evt","filterContacts","target","value","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","ContactForm","onSubmit","preventDefault","elements","alert","newContact","addContact","e","message","required","pattern","C"],"sourceRoot":""}