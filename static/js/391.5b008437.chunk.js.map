{"version":3,"file":"static/js/391.5b008437.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ModalEdit/ModalEdit.module.css?8c8e","components/ModalEdit/ModalEdit.jsx","components/ContactList/FavoriteList.jsx","pages/FavoriteContactsPage.jsx","redux/contacts/contacts.selectors.js","redux/modal/modal.selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/pages/styles.module.css?be7c"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\"};","import { useDispatch } from 'react-redux';\nimport css from './Filter.module.css';\nimport { filterContacts } from 'redux/contacts/contacts.reducer';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <input\n      className={css.input}\n      type=\"text\"\n      placeholder=\"Search...\"\n      onChange={evt => dispatch(filterContacts(evt.target.value))}\n      title=\"Search by name or phone number\"\n    />\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"closeBtn\":\"ModalEdit_closeBtn__C1Xdb\",\"modal\":\"ModalEdit_modal__qHL5S\",\"wrapper\":\"ModalEdit_wrapper__Ji4aZ\",\"overlay\":\"ModalEdit_overlay__NLf+E\",\"title\":\"ModalEdit_title__hTaq7\",\"subtitle\":\"ModalEdit_subtitle__MZsWw\",\"form\":\"ModalEdit_form__BYjr7\",\"input\":\"ModalEdit_input__lQxNb\",\"button\":\"ModalEdit_button__Iw1sV\"};","import React, { useEffect } from 'react';\nimport css from './ModalEdit.module.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectModalData } from 'redux/modal/modal.selectors';\nimport { closeModal, updateModalData } from 'redux/modal/modal.reducer';\nimport { selectorContacts } from 'redux/contacts/contacts.selectors';\nimport { editContact } from 'redux/contacts/contacts.reducer';\nimport { Notify } from 'notiflix';\n\nexport const Modal = () => {\n  const dispatch = useDispatch();\n\n  const modalData = useSelector(selectModalData);\n\n  const contacts = useSelector(selectorContacts);\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.code === 'Escape') {\n        dispatch(closeModal());\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    document.body.style.overflow = 'hidden';\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      document.body.style.overflow = 'auto';\n    };\n  }, [dispatch]);\n\n  const handleOverlayClick = event => {\n    if (event.target === event.currentTarget) {\n      dispatch(closeModal());\n    }\n  };\n\n  const submitEditContact = evt => {\n    evt.preventDefault();\n\n    const [name, number] = evt.target.elements;\n\n    const isNameDuplicate = contacts.some(\n      contact =>\n        contact.name.toLowerCase() === name.value.toLowerCase() &&\n        contact.id !== modalData.id\n    );\n\n    const isNumberDuplicate = contacts.some(\n      contact => contact.number === number.value && contact.id !== modalData.id\n    );\n\n    if (isNameDuplicate) {\n      alert(`A contact with that name already exists, try changing the name`);\n      return;\n    }\n    if (isNumberDuplicate) {\n      alert(`A contact with this phone number already exists`);\n      return;\n    }\n\n    const newContactInfo = {\n      name: name.value,\n      number: number.value,\n      id: modalData.id,\n    };\n\n    try {\n      dispatch(editContact(newContactInfo));\n      dispatch(updateModalData(newContactInfo));\n    } catch (e) {\n      Notify.error(\n        `Contact \"${newContactInfo.name}\" not edited.  Error: ${e.message}`\n      );\n    } finally {\n      Notify.success(`Contact \"${newContactInfo.name}\"  edited successfully`);\n    }\n  };\n\n  return (\n    <div onClick={handleOverlayClick} className={css.overlay}>\n      <div className={css.modal}>\n        <button className={css.closeBtn} onClick={() => dispatch(closeModal())}>\n          ❌\n        </button>\n        <div className={css.wrapper}>\n          <h3 className={css.title}>Edit contact:</h3>\n          <p className={css.subtitle}>\n            \"{modalData.name} : {modalData.number}\"\n          </p>\n          <form className={css.form} onSubmit={submitEditContact}>\n            <input\n              className={css.input}\n              type=\"text\"\n              name=\"name\"\n              defaultValue={modalData.name}\n              placeholder=\"Enter new name\"\n              required\n              pattern=\"^[A-Za-zА-Яа-яЇїІі\\d\\s]+$\"\n              title=\"You can enter letters of the Latin and Cyrillic alphabets, numbers, and spaces.\"\n            />\n            <input\n              className={css.input}\n              type=\"tel\"\n              name=\"number\"\n              defaultValue={modalData.number}\n              placeholder=\"Enter new number\"\n              required\n              pattern=\"^[\\d+\\s\\-*#]{5,18}$\"\n              title=\"Phone number can contain digits, spaces, hyphens, or symbols like *, #, etc. Length: 5-18 characters.\"\n            />\n\n            <button\n              type=\"submit\"\n              className={css.button}\n              title={`Change this contact information`}\n            >\n              Change information\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport css from './ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  deleteContact,\n  removeFromFavorite,\n} from 'redux/contacts/contacts.reducer';\nimport { Notify } from 'notiflix';\nimport {\n  selectorContacts,\n  selectorFilter,\n  selectorIsLoading,\n} from 'redux/contacts/contacts.selectors';\nimport Loader from 'components/Loader/Loader';\nimport { openModal } from 'redux/modal/modal.reducer';\nimport { Modal } from 'components/ModalEdit/ModalEdit';\nimport { selectIsOpenModal } from 'redux/modal/modal.selectors';\n\nexport const FavoriteList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectorContacts);\n\n  const filter = useSelector(selectorFilter);\n\n  const isLoading = useSelector(selectorIsLoading);\n\n  const isOpenModal = useSelector(selectIsOpenModal);\n\n  const favoriteContacts = contacts.filter(contact => contact.favorite);\n\n  const filteredContacts = favoriteContacts.filter(\n    contact =>\n      contact.name.trim().toLowerCase().includes(filter.toLowerCase().trim()) ||\n      contact.number.trim().toString().includes(filter.toLowerCase().trim())\n  );\n\n  const filteredAndSortedContacts = [...filteredContacts].sort((a, b) =>\n    a.name.localeCompare(b.name)\n  );\n\n  const handleDeleteContact = (name, id) => {\n    dispatch(deleteContact(id));\n    Notify.info(`Contact \"${name}\" deleted`);\n    dispatch(removeFromFavorite(id));\n  };\n\n  const handleRemoveFavorite = contact => {\n    dispatch(removeFromFavorite(contact.id));\n    Notify.info(`Contact \"${contact.name}\" removed from favorites`);\n  };\n\n  return (\n    <ul className={css.list}>\n      {isLoading && (\n        <div className={css.loaderWrapper}>\n          <Loader />\n        </div>\n      )}\n      {filteredAndSortedContacts.length > 0 ? (\n        filteredAndSortedContacts.map(contact => (\n          <li key={contact.id} className={css.item}>\n            <button\n              className={css.button}\n              onClick={() => handleRemoveFavorite(contact)}\n              title={`Remove favorite \"${contact.name}\"`}\n            >\n              💙\n            </button>\n            {/* button edit */}\n            <button\n              className={css.button}\n              title={`Edit this conatct`}\n              onClick={() => dispatch(openModal(contact))}\n            >\n              🖊\n            </button>\n            {/*  */}\n\n            <a className={css.link} href={`tel:${contact.number}`}>\n              <span>\n                <b>{contact.name}</b>:\n              </span>\n              <span> {contact.number}</span>\n            </a>\n            <button\n              className={`${css.button} ${css.buttonDelete}`}\n              onClick={() => handleDeleteContact(contact.name, contact.id)}\n              title={`Delete contact \"${contact.name}\"`}\n            >\n              Delete\n            </button>\n          </li>\n        ))\n      ) : (\n        <h3 className={css.subtitle}>No favorites contacts found.</h3>\n      )}\n      {isOpenModal && <Modal />}\n    </ul>\n  );\n};\n","import { FavoriteList } from 'components/ContactList/FavoriteList';\nimport css from './styles.module.css';\nimport { Filter } from 'components/Filter/Filter';\nconst Favorites = () => {\n  return (\n    <>\n      <h2 className={css.title}>Favorite contacts</h2>\n      <Filter />\n      <FavoriteList />\n    </>\n  );\n};\nexport default Favorites;\n","export const selectorContacts = state => state.contacts.contacts.items;\n\nexport const selectorError = state => state.contacts.contacts.error;\n\nexport const selectorIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectorFilter = state => state.contacts.filter;\n","export const selectIsOpenModal = state => state.modal.isOpenModal;\nexport const selectModalData = state => state.modal.modalData;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"link\":\"ContactList_link__SuaLH\",\"button\":\"ContactList_button__7kL4l\",\"subtitle\":\"ContactList_subtitle__sjzfd\",\"buttonDelete\":\"ContactList_buttonDelete__3LEoC\",\"loaderWrapper\":\"ContactList_loaderWrapper__goayi\"};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"styles_title__Eys6g\",\"subtitle\":\"styles_subtitle__DqUiJ\"};"],"names":["Filter","dispatch","useDispatch","className","css","type","placeholder","onChange","evt","filterContacts","target","value","title","Modal","modalData","useSelector","selectModalData","contacts","selectorContacts","useEffect","handleKeyDown","event","code","closeModal","window","addEventListener","document","body","style","overflow","removeEventListener","onClick","currentTarget","name","number","onSubmit","preventDefault","elements","isNameDuplicate","some","contact","toLowerCase","id","isNumberDuplicate","alert","newContactInfo","editContact","updateModalData","e","Notify","message","defaultValue","required","pattern","FavoriteList","filter","selectorFilter","isLoading","selectorIsLoading","isOpenModal","selectIsOpenModal","filteredContacts","favorite","trim","includes","toString","filteredAndSortedContacts","sort","a","b","localeCompare","Loader","length","map","removeFromFavorite","handleRemoveFavorite","openModal","href","deleteContact","state","items","modal"],"sourceRoot":""}