{"version":3,"file":"static/js/370.feddbedb.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/components/ModalEdit/ModalEdit.module.css?8c8e","components/ModalEdit/ModalEdit.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","pages/HomePage.jsx","redux/contacts/contacts.selectors.js","redux/modal/modal.selectors.js","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","webpack://react-homework-template/./src/pages/styles.module.css?be7c"],"sourcesContent":["import React from 'react';\nimport css from './ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  addToFavorite,\n  deleteContact,\n  removeFromFavorite,\n} from 'redux/contacts/contacts.reducer';\nimport { Notify } from 'notiflix';\nimport Loader from 'components/Loader/Loader';\nimport {\n  selectorContacts,\n  selectorFilter,\n  selectorIsLoading,\n} from 'redux/contacts/contacts.selectors';\nimport { openModal } from 'redux/modal/modal.reducer';\nimport { Modal } from 'components/ModalEdit/ModalEdit';\nimport { selectIsOpenModal } from 'redux/modal/modal.selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(selectorContacts);\n\n  const filter = useSelector(selectorFilter);\n\n  const isLoading = useSelector(selectorIsLoading);\n\n  const isOpenModal = useSelector(selectIsOpenModal);\n\n  const filteredContacts = contacts.filter(\n    contact =>\n      contact.name.trim().toLowerCase().includes(filter.toLowerCase().trim()) ||\n      contact.number.trim().toString().includes(filter.toLowerCase().trim())\n  );\n\n  const filteredAndSortedContacts = [...filteredContacts].sort((a, b) =>\n    a.name.localeCompare(b.name)\n  );\n\n  const handleDeleteContact = (name, id) => {\n    dispatch(deleteContact(id));\n    Notify.info(`Contact \"${name}\" deleted`);\n    dispatch(removeFromFavorite(id));\n  };\n\n  const handleAddFavorite = contact => {\n    dispatch(addToFavorite(contact.id));\n    Notify.success(`Contact \"${contact.name}\" added to favorites`);\n  };\n\n  const handleRemoveFavorite = contact => {\n    dispatch(removeFromFavorite(contact.id));\n    Notify.info(`Contact \"${contact.name}\" removed from favorites`);\n  };\n\n  const favOrNo = id => {\n    const contact = contacts.find(contact => contact.id === id);\n    return contact && contact.favorite === true;\n  };\n\n  return (\n    <ul className={css.list}>\n      {isLoading && (\n        <div className={css.loaderWrapper}>\n          <Loader />\n        </div>\n      )}\n      {filteredAndSortedContacts.length > 0 ? (\n        filteredAndSortedContacts.map(contact => (\n          <li key={contact.id} className={css.item}>\n            {favOrNo(contact.id) ? (\n              <button\n                className={css.button}\n                onClick={() => handleRemoveFavorite(contact)}\n                title={`Remove favorite \"${contact.name}\"`}\n              >\n                💙\n              </button>\n            ) : (\n              <button\n                className={css.button}\n                onClick={() => handleAddFavorite(contact)}\n                title={`Add to favorite \"${contact.name}\"`}\n              >\n                🤍\n              </button>\n            )}\n            {/* button edit */}\n            <button\n              className={css.button}\n              title={`Edit this conatct`}\n              onClick={() => dispatch(openModal(contact))}\n            >\n              🖊\n            </button>\n            {/*  */}\n            <a className={css.link} href={`tel:${contact.number}`}>\n              <span>\n                <b>{contact.name}</b>:\n              </span>\n              <span> {contact.number}</span>\n            </a>\n\n            <button\n              className={`${css.button} ${css.buttonDelete}`}\n              onClick={() => handleDeleteContact(contact.name, contact.id)}\n              title={`Delete contact \"${contact.name}\"`}\n            >\n              Delete\n            </button>\n          </li>\n        ))\n      ) : (\n        <h3 className={css.subtitle}>No contacts found.</h3>\n      )}\n      {isOpenModal && <Modal />}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"Filter_input__N7T3z\"};","import { useDispatch } from 'react-redux';\nimport css from './Filter.module.css';\nimport { filterContacts } from 'redux/contacts/contacts.reducer';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <input\n      className={css.input}\n      type=\"text\"\n      placeholder=\"Search...\"\n      onChange={evt => dispatch(filterContacts(evt.target.value))}\n    />\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"closeBtn\":\"ModalEdit_closeBtn__C1Xdb\",\"modal\":\"ModalEdit_modal__qHL5S\",\"wrapper\":\"ModalEdit_wrapper__Ji4aZ\",\"overlay\":\"ModalEdit_overlay__NLf+E\",\"title\":\"ModalEdit_title__hTaq7\",\"subtitle\":\"ModalEdit_subtitle__MZsWw\",\"form\":\"ModalEdit_form__BYjr7\",\"input\":\"ModalEdit_input__lQxNb\",\"button\":\"ModalEdit_button__Iw1sV\"};","import React, { useEffect } from 'react';\nimport css from './ModalEdit.module.css';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectModalData } from 'redux/modal/modal.selectors';\nimport { closeModal, updateModalData } from 'redux/modal/modal.reducer';\nimport { selectorContacts } from 'redux/contacts/contacts.selectors';\nimport { editContact } from 'redux/contacts/contacts.reducer';\nimport { Notify } from 'notiflix';\n\nexport const Modal = () => {\n  const dispatch = useDispatch();\n\n  const modalData = useSelector(selectModalData);\n\n  const contacts = useSelector(selectorContacts);\n\n  useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.code === 'Escape') {\n        dispatch(closeModal());\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    document.body.style.overflow = 'hidden';\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      document.body.style.overflow = 'auto';\n    };\n  }, [dispatch]);\n\n  const handleOverlayClick = event => {\n    if (event.target === event.currentTarget) {\n      dispatch(closeModal());\n    }\n  };\n\n  const submitEditContact = evt => {\n    evt.preventDefault();\n\n    const [name, number] = evt.target.elements;\n\n    const isNameDuplicate = contacts.some(\n      contact =>\n        contact.name.toLowerCase() === name.value.toLowerCase() &&\n        contact.id !== modalData.id\n    );\n\n    const isNumberDuplicate = contacts.some(\n      contact => contact.number === number.value && contact.id !== modalData.id\n    );\n\n    if (isNameDuplicate) {\n      alert(`A contact with that name already exists, try changing the name`);\n      return;\n    }\n    if (isNumberDuplicate) {\n      alert(`A contact with this phone number already exists`);\n      return;\n    }\n\n    const newContactInfo = {\n      name: name.value,\n      number: number.value,\n      id: modalData.id,\n    };\n\n    try {\n      dispatch(editContact(newContactInfo));\n      dispatch(updateModalData(newContactInfo));\n    } catch (e) {\n      Notify.error(\n        `Contact \"${newContactInfo.name}\" not edited.  Error: ${e.message}`\n      );\n    } finally {\n      Notify.success(`Contact \"${newContactInfo.name}\"  edited successfully`);\n    }\n  };\n\n  return (\n    <div onClick={handleOverlayClick} className={css.overlay}>\n      <div className={css.modal}>\n        <button className={css.closeBtn} onClick={() => dispatch(closeModal())}>\n          ❌\n        </button>\n        <div className={css.wrapper}>\n          <h3 className={css.title}>Edit contact:</h3>\n          <p className={css.subtitle}>\n            \"{modalData.name} : {modalData.number}\"\n          </p>\n          <form className={css.form} onSubmit={submitEditContact}>\n            <input\n              className={css.input}\n              type=\"text\"\n              name=\"name\"\n              defaultValue={modalData.name}\n              placeholder=\"Enter new name\"\n              required\n              pattern=\"^[A-Za-zА-Яа-яЇїІі\\d\\s]+$\"\n              title=\"You can enter letters of the Latin and Cyrillic alphabets, numbers, and spaces.\"\n            />\n            <input\n              className={css.input}\n              type=\"tel\"\n              name=\"number\"\n              defaultValue={modalData.number}\n              placeholder=\"Enter new number\"\n              required\n              pattern=\"^[\\d+\\s\\-*#]{5,12}$\"\n              title=\"Phone number can contain digits, spaces, hyphens, or symbols like *, #, etc. Length: 5-12 characters.\"\n            />\n\n            <button\n              type=\"submit\"\n              className={css.button}\n              title={`Change this contact information`}\n            >\n              Change information\n            </button>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"button\":\"ContactForm_button__eSwX9\",\"visuallyHiddenCheckbox\":\"ContactForm_visuallyHiddenCheckbox__oFd9g\",\"checkboxSpan\":\"ContactForm_checkboxSpan__a8ZBu\",\"labelCheckbox\":\"ContactForm_labelCheckbox__WmQd0\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useDispatch, useSelector } from 'react-redux';\nimport css from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { Notify } from 'notiflix';\nimport { addContact } from 'redux/contacts/contacts.reducer';\nimport { useState } from 'react';\nimport { selectorContacts } from 'redux/contacts/contacts.selectors';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectorContacts);\n\n  // робота з чекбоксом який додає до улюбленого відразу\n  const [isFavorite, setIsFavorite] = useState(false);\n  const handleFavoriteChange = () => {\n    setIsFavorite(prevState => !prevState);\n  };\n\n  const submitAddContact = evt => {\n    evt.preventDefault();\n\n    const [name, number] = evt.target.elements;\n\n    if (\n      contacts.some(\n        contact => contact.name.toLowerCase() === name.value.toLowerCase()\n      )\n    ) {\n      alert(\n        `A contact with that name (${name.value.toLowerCase()}) already exists, try changing the name`\n      );\n      return;\n    }\n    if (contacts.some(contact => contact.number === number.value)) {\n      alert(\n        `A contact with this phone number (${number.value}) already exists`\n      );\n      return;\n    }\n\n    const newContact = {\n      name: name.value,\n      number: number.value,\n      favorite: isFavorite,\n      id: nanoid(),\n    };\n    try {\n      dispatch(addContact(newContact));\n      name.value = '';\n      number.value = '';\n      setIsFavorite(false);\n    } catch (e) {\n      Notify.error(\n        `Contact \"${newContact.name}\" not added.  Error: ${e.message}`\n      );\n    } finally {\n      Notify.success(`Contact \"${newContact.name}\"  added successfully`);\n    }\n  };\n  return (\n    <form onSubmit={submitAddContact} className={css.form}>\n      <input\n        className={css.input}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Enter name\"\n        required\n        pattern=\"^[A-Za-zА-Яа-яЇїІі\\d\\s]+$\"\n        title=\"You can enter letters of the Latin and Cyrillic alphabets, numbers, and spaces.\"\n      />\n      <input\n        className={css.input}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Enter number\"\n        required\n        pattern=\"^[\\d+\\s\\-*#]{5,12}$\"\n        title=\"Phone number can contain digits, spaces, hyphens, or symbols like *, #, etc. Length: 5-12 characters.\"\n      />\n      <label className={css.labelCheckbox} title={`Add to favorite`}>\n        <input\n          className={css.visuallyHiddenCheckbox}\n          type=\"checkbox\"\n          checked={isFavorite}\n          onChange={handleFavoriteChange}\n        />\n        <span className={css.checkboxSpan}>💙 </span>\n      </label>\n\n      <button type=\"submit\" className={css.button} title={`Add new contact`}>\n        Add contact\n      </button>\n    </form>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport React from 'react';\nimport css from './styles.module.css';\n\nconst HomePage = () => {\n  return (\n    <>\n      <h1 className={css.title}>Phonebook</h1>\n      <ContactForm />\n      <h2 className={css.subtitle}>Contacts</h2>\n      <Filter />\n\n      <ContactList />\n    </>\n  );\n};\nexport default HomePage;\n","export const selectorContacts = state => state.contacts.contacts.items;\n\nexport const selectorError = state => state.contacts.contacts.error;\n\nexport const selectorIsLoading = state => state.contacts.contacts.isLoading;\n\nexport const selectorFilter = state => state.contacts.filter;\n","export const selectIsOpenModal = state => state.modal.isOpenModal;\nexport const selectModalData = state => state.modal.modalData;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\",\"item\":\"ContactList_item__EZYHO\",\"link\":\"ContactList_link__SuaLH\",\"button\":\"ContactList_button__7kL4l\",\"subtitle\":\"ContactList_subtitle__sjzfd\",\"buttonDelete\":\"ContactList_buttonDelete__3LEoC\",\"loaderWrapper\":\"ContactList_loaderWrapper__goayi\"};","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"styles_title__Eys6g\",\"subtitle\":\"styles_subtitle__DqUiJ\"};"],"names":["ContactList","dispatch","useDispatch","contacts","useSelector","selectorContacts","filter","selectorFilter","isLoading","selectorIsLoading","isOpenModal","selectIsOpenModal","filteredContacts","contact","name","trim","toLowerCase","includes","number","toString","filteredAndSortedContacts","sort","a","b","localeCompare","favOrNo","id","find","favorite","className","css","length","map","onClick","removeFromFavorite","Notify","handleRemoveFavorite","title","addToFavorite","handleAddFavorite","openModal","href","deleteContact","Filter","type","placeholder","onChange","evt","filterContacts","target","value","Modal","modalData","selectModalData","useEffect","handleKeyDown","event","code","closeModal","window","addEventListener","document","body","style","overflow","removeEventListener","currentTarget","onSubmit","preventDefault","elements","isNameDuplicate","some","isNumberDuplicate","alert","newContactInfo","editContact","updateModalData","e","message","defaultValue","required","pattern","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","byte","toUpperCase","ContactForm","useState","isFavorite","setIsFavorite","newContact","addContact","checked","prevState","C","state","items","modal"],"sourceRoot":""}